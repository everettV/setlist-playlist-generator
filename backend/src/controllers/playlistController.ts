import { Request, Response } from 'express';
import SpotifyService from '../services/SpotifyService';

export const createPlaylistFromSetlist = async (req: Request, res: Response): Promise<void> => {
  const { accessToken, setlist } = req.body;
  
  if (!accessToken || !setlist) {
    res.status(400).json({ error: 'Access token and setlist are required' });
    return;
  }
  
  try {
    SpotifyService.setAccessToken(accessToken);
    
    // Get user profile
    const userProfile = await SpotifyService.getUserProfile();
    const userId = userProfile.body.id;
    
    // Extract songs from setlist
    const songs = setlist.sets.set.flatMap((set: any) => 
      set.song.map((song: any) => song.name)
    );
    
    // Create playlist
    const playlistName = `${setlist.artist.name} - ${setlist.venue.name} (${setlist.eventDate})`;
    const playlistDescription = `Setlist from ${setlist.venue.name}, ${setlist.venue.city.name} on ${setlist.eventDate}. Generated by Setlist Playlist Generator.`;
    
    const playlist = await SpotifyService.createPlaylist(
      userId,
      playlistName,
      playlistDescription
    );
    
    // Search for tracks and add to playlist
    const trackUris: string[] = [];
    const notFoundSongs: string[] = [];
    
    for (const song of songs) {
      try {
        const searchQuery = `track:"${song}" artist:"${setlist.artist.name}"`;
        const searchResult = await SpotifyService.searchTracks(searchQuery);
        
        if (searchResult.body.tracks.items.length > 0) {
          trackUris.push(searchResult.body.tracks.items[0].uri);
        } else {
          // Try a broader search
          const broadSearchResult = await SpotifyService.searchTracks(`${song} ${setlist.artist.name}`);
          if (broadSearchResult.body.tracks.items.length > 0) {
            trackUris.push(broadSearchResult.body.tracks.items[0].uri);
          } else {
            notFoundSongs.push(song);
          }
        }
      } catch (error) {
        console.log(`Could not find track: ${song}`);
        notFoundSongs.push(song);
      }
    }
    
    if (trackUris.length > 0) {
      await SpotifyService.addTracksToPlaylist(playlist.body.id, trackUris);
    }
    
    res.json({
      playlist: {
        id: playlist.body.id,
        name: playlist.body.name,
        external_urls: playlist.body.external_urls,
      },
      tracksAdded: trackUris.length,
      totalSongs: songs.length,
      notFoundSongs,
    });
  } catch (error: any) {
    console.error('Playlist creation error:', error);
    res.status(500).json({ 
      error: error.message || 'Failed to create playlist',
      details: error.response?.data || null
    });
  }
};